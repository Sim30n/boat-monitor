# This is a basic workflow that is manually triggered

name: Manual workflow

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:
  workflow_dispatch:
    # Inputs the workflow accepts.
    inputs:
      name:
        # Friendly description to be shown in the UI instead of 'name'
        description: 'Person to greet'
        # Default value if no value is explicitly provided
        default: 'World'
        # Input has to be provided for the workflow to run
        required: true
        # The data type of the input
        type: string
      flash-arduino-micro:
        type: boolean
        description: Flash the Boat-monitor application to Arduino Micro
      flash-seeeduino-xiao:
        type: boolean
        description: Flash the Boat-monitor application (bilge monitor) to Seeeduino XIAO
      install-python-packages:
        type: boolean
        description: Install Python packages

env:
  PYTHON_EXECUTABLE: /home/pi/projects/boat/venv/bin/python
  ROBOT_EXECUTABLE: /home/pi/projects/boat/venv/bin/robot
  PYTHON_VENV_PATH: /home/pi/projects/boat/venv/bin
  BOAT_APP_SERVICE: /home/pi/projects/boat/boat-monitor


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "boat"
  boat:
    # The type of runner that the job will run on
    runs-on: self-hosted

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Runs a single command using the runners shell

    - name: Checkout
      uses: actions/checkout@v3

    - name: Stop Boat Monitor Service
      run : >
        sudo systemctl stop boat_app_service
      shell: bash

    - name: Set environmental variable and install python packages
      if: ${{ inputs.install-python-packages }} 
      run : > 
        python3 -m venv /home/pi/projects/boat/venv

        /home/pi/projects/boat/venv/bin/pip install -r $GITHUB_WORKSPACE/boat_app/requirements.txt
      shell: bash
    
    - name: Build and flash Boat-monitor application to Arduino Micro
      if: ${{ inputs.flash-arduino-micro }} 
      run : > 
        if ! command -v arduino-cli &> /dev/null; then
            export PATH="/home/pi/arduino-cli/bin/:$PATH"
        fi
        
        $PYTHON_EXECUTABLE
        $GITHUB_WORKSPACE/scripts/update_sw_version_file.py
        $GITHUB_WORKSPACE/arduino_sketch/sw_version.h
        ${{ github.sha }}

        $ROBOT_EXECUTABLE
        --variablefile tests/variables.py
        --variable boat_app_path:$GITHUB_WORKSPACE
        --variable venv_bin:$PYTHON_VENV_PATH
        --outputdir tests/test_output
        tests/build_arduino_tests.robot
      shell: bash
    
    - name: Build and flash Boat-monitor application to Seeeduino XIAO
      if: ${{ inputs.flash-seeeduino-xiao }} 
      run : > 
        if ! command -v arduino-cli &> /dev/null; then
            export PATH="/home/pi/arduino-cli/bin/:$PATH"
        fi
        
        $PYTHON_EXECUTABLE
        $GITHUB_WORKSPACE/scripts/update_sw_version_file.py
        $GITHUB_WORKSPACE/arduino_sketch/sw_version.h
        ${{ github.sha }}

        $ROBOT_EXECUTABLE
        --variablefile tests/variables.py
        --variable boat_app_path:$GITHUB_WORKSPACE
        --variable venv_bin:$PYTHON_VENV_PATH
        --outputdir tests/test_output
        tests/build_seeeduino_tests.robot
      shell: bash

    - name: Run end user tests
      run : >
        export LOG_FILE=${{ secrets.LOG_FILE }}

        $ROBOT_EXECUTABLE
        --variable commit_hash:${{ github.sha }}
        --variable boat_app_path:$GITHUB_WORKSPACE
        --variable venv_bin:$PYTHON_VENV_PATH
        --outputdir tests/test_output
        tests/end_user_tests.robot
      shell: bash
    - name: Restart Boat app service
      run : > 
        rsync -av --exclude='subdirectory_to_exclude' $GITHUB_WORKSPACE /home/pi/projects/boat/

        echo "LOG_FILE=${{ secrets.LOG_FILE }}" > $BOAT_APP_SERVICE/boat_app/.env

        sudo cp $GITHUB_WORKSPACE/scripts/boat_app_service.service /etc/systemd/system/

        sudo systemctl daemon-reload

        sudo systemctl enable boat_app_service

        sudo systemctl restart boat_app_service
      shell: bash
    - name: Set crontab
      run: >
        echo "# Crontab for boat app" > crontab_file.txt

        echo "50 16 * * * $PYTHON_EXECUTABLE $BOAT_APP_SERVICE/boat_app/log_analyzer.py" >> crontab_file.txt

        echo "@reboot $GITHUB_WORKSPACE/scripts/run_action_runner.sh" >> crontab_file.txt

        crontab crontab_file.txt
      shell: bash
      
    #- name: Start boat_app_lite
    #  #run: echo "Hello ${{ inputs.name }}"
    #  #run: ls
    #  run: |
    #     chmod +x ./scripts/run_main_app.sh
    #     ./scripts/run_main_app.sh
    #  shell: bash
